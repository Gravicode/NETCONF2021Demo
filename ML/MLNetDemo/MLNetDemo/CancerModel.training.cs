﻿// This file was auto-generated by ML.NET Model Builder. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers.FastTree;
using Microsoft.ML.Trainers;
using Microsoft.ML;

namespace MLNetDemo
{
    public partial class CancerModel
    {
        public static ITransformer RetrainPipeline(MLContext context, IDataView trainData)
        {
            var pipeline = BuildPipeline(context);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.Categorical.OneHotEncoding(new []{new InputOutputColumnPair(@"age", @"age"),new InputOutputColumnPair(@"menopause", @"menopause"),new InputOutputColumnPair(@"inv-nodes", @"inv-nodes"),new InputOutputColumnPair(@"node-caps", @"node-caps"),new InputOutputColumnPair(@"breast", @"breast"),new InputOutputColumnPair(@"breast-quad", @"breast-quad"),new InputOutputColumnPair(@"irradiat", @"irradiat")})      
                                    .Append(mlContext.Transforms.ReplaceMissingValues(@"deg-malig", @"deg-malig"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(@"tumor-size", @"tumor-size"))      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"age",@"menopause",@"inv-nodes",@"node-caps",@"breast",@"breast-quad",@"irradiat",@"deg-malig",@"tumor-size"}))      
                                    .Append(mlContext.Transforms.Conversion.MapValueToKey(@"recurrence-events", @"recurrence-events"))      
                                    .Append(mlContext.MulticlassClassification.Trainers.OneVersusAll(binaryEstimator:mlContext.BinaryClassification.Trainers.FastTree(new FastTreeBinaryTrainer.Options(){NumberOfLeaves=6,MinimumExampleCountPerLeaf=22,NumberOfTrees=4,MaximumBinCountPerFeature=425,LearningRate=1F,FeatureFraction=0.741813146279071F,LabelColumnName=@"recurrence-events",FeatureColumnName=@"Features"}), labelColumnName: @"recurrence-events"))      
                                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(@"PredictedLabel", @"PredictedLabel"));

            return pipeline;
        }
    }
}
