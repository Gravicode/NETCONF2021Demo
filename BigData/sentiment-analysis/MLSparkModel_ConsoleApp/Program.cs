
// This file was auto-generated by ML.NET Model Builder. 

using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using Microsoft.ML;
using Microsoft.ML.Data;
using Microsoft.Spark.Sql;
using MLSparkModel;

namespace MLSparkModel_ConsoleApp
{
    class Program
    {
        static void Main(string[] args)
        {
            //// Create single instance of sample data from first line of dataset for model input
            //SentimentModel.ModelInput sampleData = new SentimentModel.ModelInput()
            //{
            //    ReviewText = "Nice to see you.."
            //};

            //// Make a single prediction on the sample data and print results
            //var predictionResult = SentimentModel.Predict(sampleData);

            //Console.WriteLine("Using model to make single prediction -- Comparing actual Sentiment with predicted Sentiment from sample data...\n\n");

            //Console.WriteLine($"ReviewText: {sampleData.ReviewText}");

            //Console.WriteLine($"\n\nPredicted Sentiment: {predictionResult.Prediction}\n\n");
            //Console.WriteLine("=============== End of process, hit any key to finish ===============");

            RunSparkWithML();
            //Console.ReadKey();
        }
        static bool predict(string text)
        {
            // Create single instance of sample data from first line of dataset for model input
            SentimentModel.ModelInput sampleData = new SentimentModel.ModelInput()
            {
                ReviewText = text
            };

            //// Make a single prediction on the sample data and print results
            var predictionResult = SentimentModel.Predict(sampleData);

            //Console.WriteLine("Using model to make single prediction -- Comparing actual Sentiment with predicted Sentiment from sample data...\n\n");

            //Console.WriteLine($"ReviewText: {text}");

            //Console.WriteLine($"\n\nPredicted Sentiment: {predictionResult.Prediction}\n\n");
            //Console.WriteLine("=============== End of process, hit any key to finish ===============");

            return predictionResult.Prediction == 1f;
        }
        public static string GetAbsolutePath(string relativePath)
        {
            Type t = MethodBase.GetCurrentMethod().DeclaringType;
            FileInfo _dataRoot = new FileInfo(t.Assembly.Location);
            string assemblyFolderPath = _dataRoot.Directory.FullName;

            string fullPath = Path.Combine(assemblyFolderPath, relativePath);

            return fullPath;
        }
        static string DATA_FILEPATH;
        static void RunSparkWithML()
        {
            try
            {


            //var DATA_FILEPATH = GetAbsolutePath(@"..\..\..\..\yelptest.csv");
            DATA_FILEPATH = @"D:\event\NETCONF2021\NETCONF2021Demo\BigData\sentiment-analysis\yelptest.csv";
            bool exist = File.Exists(DATA_FILEPATH);
            SparkSession spark = SparkSession
     .Builder()
     .AppName(".NET for Apache Spark Sentiment Analysis")
     .GetOrCreate();
                /*DataFrame df = spark
        .ReadStream()
        .Option("header", true)
        .Option("inferSchema", true)
        .Csv(DATA_FILEPATH);*/
            var options = new Dictionary<string, string> { { "delimiter", "," } };
            var df = spark.Read().Format("csv").Option("header", true)
            .Option("inferSchema", true)
            .Options(options).Load(DATA_FILEPATH);
            df.PrintSchema();
            df.Show(10);
            spark.Udf()
    .Register<string, bool>("MLudf", predict);
            // Use Spark SQL to call ML.NET UDF
            // Display results of sentiment analysis on reviews
            df.CreateOrReplaceTempView("Reviews");
            DataFrame sqlDf = spark.Sql("SELECT ReviewText, MLudf(ReviewText) FROM Reviews");
            sqlDf.Show();

            // Print out first 20 rows of data
            // Prevent data getting cut off by setting truncate = 0
            sqlDf.Show(20, 0, false);

            spark.Stop();
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.ToString());
            }
        }
    }
}
